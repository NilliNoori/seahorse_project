Traceback (most recent call last):
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
ax = sns.barplot(
    data=agg_df,
    x="early_group",
    y="total_bar_spend",
    ci="sd",  # use "sd" for standard deviation, or "se" for standard error
    palette=["#a8dadc", "#f4a9ae"]
)

# Add value labels on top of each bar
for p in ax.patches:
    height = p.get_height()
    ax.annotate(f"â‚¬{height:,.0f}", (p.get_x() + p.get_width() / 2., height),
                ha='center', va='bottom', fontsize=11, fontweight='bold')

plt.title("Average Bar Revenue on Days with Many vs Few Early Arrivals", fontsize=13)
plt.xlabel("Group (based on share of early arrivals)")
plt.ylabel("Average Total Bar Revenue (â‚¬)")
plt.grid(True, axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 6[0m
[1;32m      2[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mplt[39;00m
[1;32m      4[0m plt[38;5;241m.[39mfigure(figsize[38;5;241m=[39m([38;5;241m8[39m, [38;5;241m5[39m))
[1;32m      5[0m ax [38;5;241m=[39m sns[38;5;241m.[39mbarplot(
[0;32m----> 6[0m     data[38;5;241m=[39m[43magg_df[49m,
[1;32m      7[0m     x[38;5;241m=[39m[38;5;124m"[39m[38;5;124mearly_group[39m[38;5;124m"[39m,
[1;32m      8[0m     y[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtotal_bar_spend[39m[38;5;124m"[39m,
[1;32m      9[0m     ci[38;5;241m=[39m[38;5;124m"[39m[38;5;124msd[39m[38;5;124m"[39m,  [38;5;66;03m# use "sd" for standard deviation, or "se" for standard error[39;00m
[1;32m     10[0m     palette[38;5;241m=[39m[[38;5;124m"[39m[38;5;124m#a8dadc[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m#f4a9ae[39m[38;5;124m"[39m]
[1;32m     11[0m )
[1;32m     13[0m [38;5;66;03m# Add value labels on top of each bar[39;00m
[1;32m     14[0m [38;5;28;01mfor[39;00m p [38;5;129;01min[39;00m ax[38;5;241m.[39mpatches:

[0;31mNameError[0m: name 'agg_df' is not defined

